{"version":3,"sources":["file:///Users/kengyulin/Documents/MyProject/CC/CC3.SpriteEffect.DemoProject/extensions/sprite-effect/source/assets/comp/SpriteEffectWaterFlow.ts"],"names":["_decorator","Material","Texture2D","Vec2","EDITOR_NOT_IN_PREVIEW","SpriteEffectBase","ccclass","property","SpriteEffectWaterFlow","group","name","id","type","tooltip","slide","range","isDirty","idx","_isPropDirty","setDirty","val","frequency","_frequency","reflashParams","amplitude","_amplitude","speed","_speed","flowDirection","_flowDirection","set","countOfUsedFloats","getPropsUnionKey","constructor","_is2Din3D","updateParams","index","propBuffer","_effectColor","r","g","b","a","x","y","initMaterial","mat","initialize","effectAsset","defines","technique","setProperty","noiseTexture"],"mappings":"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","sourcesContent":["import { _decorator, Color, Material, Texture2D, Vec2 } from 'cc';\nimport { DEV, EDITOR_NOT_IN_PREVIEW } from 'cc/env';\nimport { SpriteEffectBase } from './SpriteEffectBase';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('SpriteEffectWaterFlow')\nexport class SpriteEffectWaterFlow extends SpriteEffectBase {\n    private static _isPropDirty: boolean[] = [false, false, false];\n\n    protected isDirty(idx: number): boolean {\n        return SpriteEffectWaterFlow._isPropDirty[idx];\n    }\n    \n    protected setDirty(idx: number, val: boolean): void {\n        SpriteEffectWaterFlow._isPropDirty[idx] = val;\n    }\n\n\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, type: Texture2D, tooltip: '指定噪声貼圖' })\n    public noiseTexture: Texture2D | null = null;\n\n    //#region frequency\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0, 10, 0.01], tooltip: '扭曲频率' })\n    public set frequency(val: number) {\n        this._frequency = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        }\n        else {\n            this.reflashParams();\n        }\n    }\n    \n    public get frequency(): number {\n        return this._frequency;\n    }\n\n    @property\n    private _frequency: number = 0.1;\n    //#endregion\n\n\n    //#region amplitude\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0, 1, 0.01], tooltip: '扭曲幅度' })\n    public set amplitude(val: number) {\n        this._amplitude = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        }\n        else {\n            this.reflashParams();\n        }\n    }\n    \n    public get amplitude(): number {\n        return this._amplitude;\n    }\n\n    @property\n    private _amplitude: number = 0.02;\n    //#endregion\n\n\n    //#region speed\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0, 1, 0.01], tooltip: '扭曲速度' })\n    public set speed(val: number) {\n        this._speed = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        }\n        else {\n            this.reflashParams();\n        }\n    }\n    \n    public get speed(): number {\n        return this._speed;\n    }\n\n    @property\n    private _speed: number = 0.1;\n    //#endregion\n\n\n    //#region flowDirection\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, tooltip: '流动方向' })\n    public set flowDirection(val: Vec2) {\n        this._flowDirection.set(val);\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        }\n        else {\n            this.reflashParams();\n        }\n    }\n    \n    public get flowDirection(): Vec2 {\n        return this._flowDirection;\n    }\n\n    @property\n    private _flowDirection: Vec2 = new Vec2(1, 0);\n    //#endregion\n\n\n    //#region override\n    /**\n     * @override SpriteEffectBase\n     */\n    protected get countOfUsedFloats(): number {\n        return 16;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected getPropsUnionKey(): string {\n        return `${this.constructor.name}_${this._is2Din3D}`;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected updateParams(index: number, propBuffer: Float32Array): void {\n        propBuffer[index + 0] = this._effectColor.r / 255;\n        propBuffer[index + 1] = this._effectColor.g / 255;\n        propBuffer[index + 2] = this._effectColor.b / 255;\n        propBuffer[index + 3] = this._effectColor.a / 255;\n\n        propBuffer[index + 4] = this._flowDirection.x;\n        propBuffer[index + 5] = this._flowDirection.y;\n        propBuffer[index + 6] = this._frequency;\n        propBuffer[index + 7] = this._amplitude;\n\n        propBuffer[index + 8] = this._speed;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected initMaterial(): Material {\n        let mat = new Material();\n        mat.initialize(\n            {\n                effectAsset: this.effectAsset,\n                defines: {},\n                technique: this._is2Din3D ? 1 : 0\n            }\n        );\n\n        mat.setProperty('noiseTexture', this.noiseTexture);\n        return mat;\n    }\n}\n\n"]}