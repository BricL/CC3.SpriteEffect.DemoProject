{"version":3,"sources":["file:///Users/kengyulin/Documents/MyProject/CC/CC3.SpriteEffect.Proj/extensions/sprite-effect/source/assets/comp/SpriteEffectTest.ts"],"names":["_decorator","Material","SpriteEffectBase","ccclass","property","SpriteEffectTest","isDirty","idx","_isPropDirty","setDirty","val","countOfUsedFloats","getPropsUnionKey","constructor","name","_is2Din3D","updateParams","index","propBuffer","_effectColor","r","g","b","a","initMaterial","mat","initialize","effectAsset","defines","technique"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAmBC,MAAAA,Q,OAAAA,Q;;AAEnBC,MAAAA,gB,iBAAAA,gB;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;kCAIjBK,gB,WADZF,OAAO,CAAC,kBAAD,C,2BAAR,MACaE,gBADb;AAAA;AAAA,gDACuD;AAGzCC,QAAAA,OAAO,CAACC,GAAD,EAAuB;AACpC,iBAAOF,gBAAgB,CAACG,YAAjB,CAA8BD,GAA9B,CAAP;AACH;;AAESE,QAAAA,QAAQ,CAACF,GAAD,EAAcG,GAAd,EAAkC;AAChDL,UAAAA,gBAAgB,CAACG,YAAjB,CAA8BD,GAA9B,IAAqCG,GAArC;AACH,SATkD,CAYnD;;AACA;AACJ;AACA;;;AACmC,YAAjBC,iBAAiB,GAAW;AACtC,iBAAO,CAAP;AACH;AAED;AACJ;AACA;;;AACcC,QAAAA,gBAAgB,GAAW;AACjC,iBAAQ,GAAE,KAAKC,WAAL,CAAiBC,IAAK,IAAG,KAAKC,SAAU,EAAlD;AACH;AAED;AACJ;AACA;;;AACcC,QAAAA,YAAY,CAACC,KAAD,EAAgBC,UAAhB,EAAgD;AAClEA,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwB,KAAKE,YAAL,CAAkBC,CAAlB,GAAsB,GAA9C;AACAF,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwB,KAAKE,YAAL,CAAkBE,CAAlB,GAAsB,GAA9C;AACAH,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwB,KAAKE,YAAL,CAAkBG,CAAlB,GAAsB,GAA9C;AACAJ,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwB,KAAKE,YAAL,CAAkBI,CAAlB,GAAsB,GAA9C;AACH;AAED;AACJ;AACA;;;AACcC,QAAAA,YAAY,GAAa;AAC/B,cAAIC,GAAG,GAAG,IAAIxB,QAAJ,EAAV;AACAwB,UAAAA,GAAG,CAACC,UAAJ,CACI;AACIC,YAAAA,WAAW,EAAE,KAAKA,WADtB;AAEIC,YAAAA,OAAO,EAAE,EAFb;AAGIC,YAAAA,SAAS,EAAE,KAAKd,SAAL,GAAiB,CAAjB,GAAqB;AAHpC,WADJ;AAOA,iBAAOU,GAAP;AACH;;AAlDkD,O,UACpCjB,Y,GAA0B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,C","sourcesContent":["import { _decorator, Color, Material } from 'cc';\nimport { DEV, EDITOR_NOT_IN_PREVIEW } from 'cc/env';\nimport { SpriteEffectBase } from './SpriteEffectBase';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('SpriteEffectTest')\nexport class SpriteEffectTest extends SpriteEffectBase {\n    private static _isPropDirty: boolean[] = [false, false, false];\n\n    protected isDirty(idx: number): boolean {\n        return SpriteEffectTest._isPropDirty[idx];\n    }\n    \n    protected setDirty(idx: number, val: boolean): void {\n        SpriteEffectTest._isPropDirty[idx] = val;\n    }\n\n\n    //#region override\n    /**\n     * @override SpriteEffectBase\n     */\n    protected get countOfUsedFloats(): number {\n        return 4;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected getPropsUnionKey(): string {\n        return `${this.constructor.name}_${this._is2Din3D}`;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected updateParams(index: number, propBuffer: Float32Array): void {\n        propBuffer[index + 0] = this._effectColor.r / 255;\n        propBuffer[index + 1] = this._effectColor.g / 255;\n        propBuffer[index + 2] = this._effectColor.b / 255;\n        propBuffer[index + 3] = this._effectColor.a / 255;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected initMaterial(): Material {\n        let mat = new Material();\n        mat.initialize(\n            {\n                effectAsset: this.effectAsset,\n                defines: {},\n                technique: this._is2Din3D ? 1 : 0\n            }\n        );\n        return mat;\n    }\n}\n\n"]}