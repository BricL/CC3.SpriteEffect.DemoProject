{"version":3,"sources":["file:///Users/kengyulin/Documents/MyProject/CC/CC3.SpriteEffect.Proj/extensions/sprite-effect/source/assets/comp/SpriteEffectWaterRipple.ts"],"names":["_decorator","Material","EDITOR_NOT_IN_PREVIEW","SpriteEffectBase","ccclass","property","SpriteEffectWaterRipple","group","name","id","slide","range","tooltip","isDirty","idx","_isPropDirty","setDirty","val","speed","_speed","reflashParams","density","_density","countOfUsedFloats","getPropsUnionKey","constructor","_is2Din3D","updateParams","index","propBuffer","_effectColor","r","g","b","a","initMaterial","mat","initialize","effectAsset","defines","technique"],"mappings":"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","sourcesContent":["import { _decorator, Color, Material } from 'cc';\nimport { DEV, EDITOR_NOT_IN_PREVIEW } from 'cc/env';\nimport { SpriteEffectBase } from './SpriteEffectBase';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('SpriteEffectWaterRipple')\nexport class SpriteEffectWaterRipple extends SpriteEffectBase {\n    private static _isPropDirty: boolean[] = [false, false, false];\n\n    protected isDirty(idx: number): boolean {\n        return SpriteEffectWaterRipple._isPropDirty[idx];\n    }\n    \n    protected setDirty(idx: number, val: boolean): void {\n        SpriteEffectWaterRipple._isPropDirty[idx] = val;\n    }\n\n\n    //#region speed\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0, 1, 0.01], tooltip: '扭曲速度' })\n    public set speed(val: number) {\n        this._speed = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        } else {\n            this.reflashParams();\n        }\n    }\n\n    public get speed(): number {\n        return this._speed;\n    }\n\n    @property\n    private _speed: number = 0.1;\n    //#endregion\n\n\n    //#region density\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [1, 100, 0.01], tooltip: '水波密度' })\n    public set density(val: number) {\n        this._density = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        } else {\n            this.reflashParams();\n        }\n    }\n\n    public get density(): number {\n        return this._density;\n    }\n\n    @property\n    private _density: number = 6.12;\n    //#endregion\n\n\n    //#region override\n    /**\n     * @override SpriteEffectBase\n     */\n    protected get countOfUsedFloats(): number {\n        return 6;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected getPropsUnionKey(): string {\n        return `${this.constructor.name}_${this._is2Din3D}`;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected updateParams(index: number, propBuffer: Float32Array): void {\n        propBuffer[index + 0] = this._effectColor.r / 255;\n        propBuffer[index + 1] = this._effectColor.g / 255;\n        propBuffer[index + 2] = this._effectColor.b / 255;\n        propBuffer[index + 3] = this._effectColor.a / 255;\n\n        propBuffer[index + 4] = this._speed;\n        propBuffer[index + 5] = this._density;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected initMaterial(): Material {\n        let mat = new Material();\n        mat.initialize(\n            {\n                effectAsset: this.effectAsset,\n                defines: {},\n                technique: this._is2Din3D ? 1 : 0\n            }\n        );\n        return mat;\n    }\n}\n\n"]}