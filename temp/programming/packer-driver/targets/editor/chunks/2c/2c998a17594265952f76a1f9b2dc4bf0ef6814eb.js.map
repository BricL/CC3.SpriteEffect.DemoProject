{"version":3,"sources":["file:///Users/kengyulin/Documents/MyProject/CC/CC3.SpriteEffect.Proj/extensions/sprite-effect/source/assets/comp/SpriteEffectFlowLight.ts"],"names":["_decorator","Color","Material","EDITOR_NOT_IN_PREVIEW","SpriteEffectBase","ccclass","property","SpriteEffectFlowLight","group","name","id","tooltip","slide","range","isDirty","idx","_isPropDirty","setDirty","val","lightColor","_lightColor","set","reflashParams","lightWidth","_lightWidth","soft","_soft","offset","_offset","rotation","_rotation","countOfUsedFloats","getPropsUnionKey","constructor","_is2Din3D","updateParams","index","propBuffer","baseUV","getUV","spriteFrame","uv","_effectColor","r","g","b","a","x","y","z","w","initMaterial","mat","initialize","effectAsset","defines","technique"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,Q,OAAAA,Q;;AACdC,MAAAA,qB,UAAAA,qB;;AACLC,MAAAA,gB,iBAAAA,gB;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;uCAGjBO,qB,WADZF,OAAO,CAAC,uBAAD,C,UAcHC,QAAQ,CAAC;AAAEE,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,EAAE,EAAE;AAA7B,SAAT;AAA6CC,QAAAA,OAAO,EAAE;AAAtD,OAAD,C,UAqBRL,QAAQ,CAAC;AAAEE,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,EAAE,EAAE;AAA7B,SAAT;AAA6CE,QAAAA,KAAK,EAAE,IAApD;AAA0DC,QAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,KAAX,CAAjE;AAAoFF,QAAAA,OAAO,EAAE;AAA7F,OAAD,C,UAqBRL,QAAQ,CAAC;AAAEE,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,EAAE,EAAE;AAA7B,SAAT;AAA6CE,QAAAA,KAAK,EAAE,IAApD;AAA0DC,QAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,CAAjE;AAAqFF,QAAAA,OAAO,EAAE;AAA9F,OAAD,C,UAqBRL,QAAQ,CAAC;AAAEE,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,EAAE,EAAE;AAA7B,SAAT;AAA6CE,QAAAA,KAAK,EAAE,IAApD;AAA0DC,QAAAA,KAAK,EAAE,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,KAAZ,CAAjE;AAAqFF,QAAAA,OAAO,EAAE;AAA9F,OAAD,C,UAqBRL,QAAQ,CAAC;AAAEE,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,EAAE,EAAE;AAA7B,SAAT;AAA6CE,QAAAA,KAAK,EAAE,IAApD;AAA0DC,QAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,CAAjE;AAAmFF,QAAAA,OAAO,EAAE;AAA5F,OAAD,C,sCAlGb,MACaJ,qBADb;AAAA;AAAA,gDAC4D;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAG9CO,QAAAA,OAAO,CAACC,GAAD,EAAuB;AACpC,iBAAOR,qBAAqB,CAACS,YAAtB,CAAmCD,GAAnC,CAAP;AACH;;AAESE,QAAAA,QAAQ,CAACF,GAAD,EAAcG,GAAd,EAAkC;AAChDX,UAAAA,qBAAqB,CAACS,YAAtB,CAAmCD,GAAnC,IAA0CG,GAA1C;AACH,SATuD,CAYxD;;;AAEqB,YAAVC,UAAU,CAACD,GAAD,EAAa;AAC9B,eAAKE,WAAL,CAAiBC,GAAjB,CAAqBH,GAArB;;AAEA,cAAIf,qBAAJ,EAA2B;AACvB,iBAAKmB,aAAL;AACH,WAFD,MAEO;AACH,iBAAKA,aAAL;AACH;AACJ;;AAEoB,YAAVH,UAAU,GAAU;AAC3B,iBAAO,KAAKC,WAAZ;AACH;;AAID;AAGA;AAEqB,YAAVG,UAAU,CAACL,GAAD,EAAc;AAC/B,eAAKM,WAAL,GAAmBN,GAAnB;;AAEA,cAAIf,qBAAJ,EAA2B;AACvB,iBAAKmB,aAAL;AACH,WAFD,MAEO;AACH,iBAAKA,aAAL;AACH;AACJ;;AAEoB,YAAVC,UAAU,GAAW;AAC5B,iBAAO,KAAKC,WAAZ;AACH;;AAID;AAGA;AAEe,YAAJC,IAAI,CAACP,GAAD,EAAc;AACzB,eAAKQ,KAAL,GAAaR,GAAb;;AAEA,cAAIf,qBAAJ,EAA2B;AACvB,iBAAKmB,aAAL;AACH,WAFD,MAEO;AACH,iBAAKA,aAAL;AACH;AACJ;;AAEc,YAAJG,IAAI,GAAW;AACtB,iBAAO,KAAKC,KAAZ;AACH;;AAID;AAGA;AAEiB,YAANC,MAAM,CAACT,GAAD,EAAc;AAC3B,eAAKU,OAAL,GAAeV,GAAf;;AAEA,cAAIf,qBAAJ,EAA2B;AACvB,iBAAKmB,aAAL;AACH,WAFD,MAEO;AACH,iBAAKA,aAAL;AACH;AACJ;;AAEgB,YAANK,MAAM,GAAW;AACxB,iBAAO,KAAKC,OAAZ;AACH;;AAID;AAGA;AAEmB,YAARC,QAAQ,CAACX,GAAD,EAAc;AAC7B,eAAKY,SAAL,GAAiBZ,GAAjB;;AAEA,cAAIf,qBAAJ,EAA2B;AACvB,iBAAKmB,aAAL;AACH,WAFD,MAEO;AACH,iBAAKA,aAAL;AACH;AACJ;;AAEkB,YAARO,QAAQ,GAAW;AAC1B,iBAAO,KAAKC,SAAZ;AACH;;AAID;AAIA;;AACA;AACJ;AACA;AACmC,YAAjBC,iBAAiB,GAAW;AACtC,iBAAO,EAAP;AACH;AAED;AACJ;AACA;;;AACcC,QAAAA,gBAAgB,GAAW;AACjC,iBAAQ,GAAE,KAAKC,WAAL,CAAiBxB,IAAK,IAAG,KAAKyB,SAAU,EAAlD;AACH;AAED;AACJ;AACA;;;AACcC,QAAAA,YAAY,CAACC,KAAD,EAAgBC,UAAhB,EAAgD;AAClE,gBAAMC,MAAM,GAAG,KAAKC,KAAL,CAAW,KAAKC,WAAL,CAAkBC,EAA7B,CAAf;AAEAJ,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwB,KAAKM,YAAL,CAAkBC,CAAlB,GAAsB,GAA9C;AACAN,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwB,KAAKM,YAAL,CAAkBE,CAAlB,GAAsB,GAA9C;AACAP,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwB,KAAKM,YAAL,CAAkBG,CAAlB,GAAsB,GAA9C;AACAR,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwB,KAAKM,YAAL,CAAkBI,CAAlB,GAAsB,GAA9C;AAEAT,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwBE,MAAM,CAACS,CAA/B;AACAV,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwBE,MAAM,CAACU,CAA/B;AACAX,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwBE,MAAM,CAACW,CAA/B;AACAZ,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwBE,MAAM,CAACY,CAA/B;AAEAb,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwB,KAAKhB,WAAL,CAAiBuB,CAAjB,GAAqB,GAA7C;AACAN,UAAAA,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,GAAwB,KAAKhB,WAAL,CAAiBwB,CAAjB,GAAqB,GAA7C;AACAP,UAAAA,UAAU,CAACD,KAAK,GAAG,EAAT,CAAV,GAAyB,KAAKhB,WAAL,CAAiByB,CAAjB,GAAqB,GAA9C;AACAR,UAAAA,UAAU,CAACD,KAAK,GAAG,EAAT,CAAV,GAAyB,KAAKhB,WAAL,CAAiB0B,CAAjB,GAAqB,GAA9C;AAEAT,UAAAA,UAAU,CAACD,KAAK,GAAG,EAAT,CAAV,GAAyB,KAAKZ,WAA9B;AACAa,UAAAA,UAAU,CAACD,KAAK,GAAG,EAAT,CAAV,GAAyB,KAAKV,KAA9B;AACAW,UAAAA,UAAU,CAACD,KAAK,GAAG,EAAT,CAAV,GAAyB,KAAKR,OAA9B;AACAS,UAAAA,UAAU,CAACD,KAAK,GAAG,EAAT,CAAV,GAAyB,KAAKN,SAA9B;AACH;AAED;AACJ;AACA;;;AACcqB,QAAAA,YAAY,GAAa;AAC/B,cAAIC,GAAG,GAAG,IAAIlD,QAAJ,EAAV;AACAkD,UAAAA,GAAG,CAACC,UAAJ,CACI;AACIC,YAAAA,WAAW,EAAE,KAAKA,WADtB;AAEIC,YAAAA,OAAO,EAAE,EAFb;AAGIC,YAAAA,SAAS,EAAE,KAAKtB,SAAL,GAAiB,CAAjB,GAAqB;AAHpC,WADJ;AAOA,iBAAOkB,GAAP;AACH;;AA7KuD,O,UACzCpC,Y,GAA0B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,C,kPA2BxCV,Q;;;;;iBAC4B,IAAIL,KAAJ,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,C;;gPAoB5BK,Q;;;;;iBAC6B,G;;8NAoB7BA,Q;;;;;iBACuB,G;;oOAoBvBA,Q;;;;;iBACyB,CAAC,G;;0OAoB1BA,Q;;;;;iBAC2B,G","sourcesContent":["import { _decorator, Color, Material } from 'cc';\nimport { DEV, EDITOR_NOT_IN_PREVIEW } from 'cc/env';\nimport { SpriteEffectBase } from './SpriteEffectBase';\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('SpriteEffectFlowLight')\nexport class SpriteEffectFlowLight extends SpriteEffectBase {\n    private static _isPropDirty: boolean[] = [false, false, false];\n\n    protected isDirty(idx: number): boolean {\n        return SpriteEffectFlowLight._isPropDirty[idx];\n    }\n    \n    protected setDirty(idx: number, val: boolean): void {\n        SpriteEffectFlowLight._isPropDirty[idx] = val;\n    }\n\n\n    //#region lightColor\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, tooltip: '流光颜色' })\n    public set lightColor(val: Color) {\n        this._lightColor.set(val);\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        } else {\n            this.reflashParams();\n        }\n    }\n    \n    public get lightColor(): Color {\n        return this._lightColor;\n    }\n\n    @property\n    private _lightColor: Color = new Color(1, 1, 1, 1);\n    //#endregion\n\n\n    //#region lightWidth\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0.1, 2.0, 0.001], tooltip: '流光寬度' })\n    public set lightWidth(val: number) {\n        this._lightWidth = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        } else {\n            this.reflashParams();\n        }\n    }\n    \n    public get lightWidth(): number {\n        return this._lightWidth;\n    }\n\n    @property\n    private _lightWidth: number = 0.5;\n    //#endregion\n\n\n    //#region soft\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0.0, 10.0, 0.001], tooltip: '柔邊程度' })\n    public set soft(val: number) {\n        this._soft = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        } else {\n            this.reflashParams();\n        }\n    }\n    \n    public get soft(): number {\n        return this._soft;\n    }\n\n    @property\n    private _soft: number = 0.7;\n    //#endregion\n\n\n    //#region offset\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [-3.0, 3.0, 0.001], tooltip: '偏移量' })\n    public set offset(val: number) {\n        this._offset = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        } else {\n            this.reflashParams();\n        }\n    }\n    \n    public get offset(): number {\n        return this._offset;\n    }\n\n    @property\n    private _offset: number = -8.0;\n    //#endregion\n\n\n    //#region rotation\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0.0, 6.28, 0.1], tooltip: '流光角度' })\n    public set rotation(val: number) {\n        this._rotation = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        } else {\n            this.reflashParams();\n        }\n    }\n    \n    public get rotation(): number {\n        return this._rotation;\n    }\n\n    @property\n    private _rotation: number = 2.4;\n    //#endregion\n\n\n\n    //#region override\n    /**\n     * @override SpriteEffectBase\n     */\n    protected get countOfUsedFloats(): number {\n        return 16;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected getPropsUnionKey(): string {\n        return `${this.constructor.name}_${this._is2Din3D}`;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected updateParams(index: number, propBuffer: Float32Array): void {\n        const baseUV = this.getUV(this.spriteFrame!.uv);\n\n        propBuffer[index + 0] = this._effectColor.r / 255;\n        propBuffer[index + 1] = this._effectColor.g / 255;\n        propBuffer[index + 2] = this._effectColor.b / 255;\n        propBuffer[index + 3] = this._effectColor.a / 255;\n\n        propBuffer[index + 4] = baseUV.x;\n        propBuffer[index + 5] = baseUV.y;\n        propBuffer[index + 6] = baseUV.z;\n        propBuffer[index + 7] = baseUV.w;\n\n        propBuffer[index + 8] = this._lightColor.r / 255;\n        propBuffer[index + 9] = this._lightColor.g / 255;\n        propBuffer[index + 10] = this._lightColor.b / 255;\n        propBuffer[index + 11] = this._lightColor.a / 255;\n\n        propBuffer[index + 12] = this._lightWidth;\n        propBuffer[index + 13] = this._soft;\n        propBuffer[index + 14] = this._offset;\n        propBuffer[index + 15] = this._rotation;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected initMaterial(): Material {\n        let mat = new Material();\n        mat.initialize(\n            {\n                effectAsset: this.effectAsset,\n                defines: {},\n                technique: this._is2Din3D ? 1 : 0\n            }\n        );\n        return mat;\n    }\n}\n\n"]}