{"version":3,"sources":["file:///Users/kengyulin/Documents/MyProject/CC/CC3.SpriteEffect.DemoProject/extensions/sprite-effect/source/assets/comp/SpriteEffectDistort.ts"],"names":["_decorator","lerp","Material","Texture2D","EDITOR_NOT_IN_PREVIEW","SpriteEffectBase","ccclass","property","SpriteEffectDistort","group","name","id","type","tooltip","slide","range","isDirty","idx","_isPropDirty","setDirty","val","speed","_speed","reflashParams","strength","_strength","countOfUsedFloats","getPropsUnionKey","constructor","_is2Din3D","updateParams","index","propBuffer","baseUV","getUV","spriteFrame","uv","_effectColor","r","g","b","a","x","y","z","w","initMaterial","mat","initialize","effectAsset","defines","technique","setProperty","noiseTexture"],"mappings":"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","sourcesContent":["import { _decorator, lerp, log, Material, Texture2D } from 'cc';\nimport { EDITOR_NOT_IN_PREVIEW } from 'cc/env';\nimport { SpriteEffectBase } from './SpriteEffectBase';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('SpriteEffectDistort')\nexport class SpriteEffectDistort extends SpriteEffectBase {\n    private static _isPropDirty: boolean[] = [false, false, false];\n\n    protected isDirty(idx: number): boolean {\n        return SpriteEffectDistort._isPropDirty[idx];\n    }\n    \n    protected setDirty(idx: number, val: boolean): void {\n        SpriteEffectDistort._isPropDirty[idx] = val;\n    }\n\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, type: Texture2D, tooltip: '指定噪声貼圖' })\n    public noiseTexture: Texture2D | null = null;\n\n    //#region speed\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '扭曲速度' })\n    public set speed(val: number) {\n        this._speed = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        }\n        else {\n            this.reflashParams();\n        }\n    }\n\n    public get speed(): number {\n        return this._speed;\n    }\n\n    @property\n    private _speed: number = 0.05;\n    //#endregion\n\n\n    //#region strength\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0.0, 1.0, 0.01], tooltip: '扭曲强度' })\n    public set strength(val: number) {\n        this._strength = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        }\n        else {\n            this.reflashParams();\n        }\n    }\n\n    public get strength(): number {\n        return this._strength;\n    }\n\n    @property\n    private _strength: number = 0.05;\n    //#endregion\n\n\n    //#region override\n    /**\n     * @override SpriteEffectBase\n     */\n    protected get countOfUsedFloats(): number {\n        // return 10; // 手機上非2次幂的紋理會報錯\n        return 16;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected getPropsUnionKey(): string {\n        return `${this.constructor.name}_${this._is2Din3D}`;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected updateParams(index: number, propBuffer: Float32Array): void {\n        const baseUV = this.getUV(this.spriteFrame!.uv);\n\n        propBuffer[index + 0] = this._effectColor.r / 255;\n        propBuffer[index + 1] = this._effectColor.g / 255;\n        propBuffer[index + 2] = this._effectColor.b / 255;\n        propBuffer[index + 3] = this._effectColor.a / 255;\n\n        propBuffer[index + 4] = baseUV.x;\n        propBuffer[index + 5] = baseUV.y;\n        propBuffer[index + 6] = baseUV.z;\n        propBuffer[index + 7] = baseUV.w;\n\n        propBuffer[index + 8] = lerp(0.0, 0.2, this._speed);\n        propBuffer[index + 9] = lerp(0.0, 0.2, this._strength);\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected initMaterial(): Material {\n        let mat = new Material();\n        mat.initialize(\n            {\n                effectAsset: this.effectAsset,\n                defines: {},\n                technique: this._is2Din3D ? 1 : 0\n            }\n        );\n\n        mat.setProperty('noiseTexture', this.noiseTexture);\n        return mat;\n    }\n}\n\n"]}