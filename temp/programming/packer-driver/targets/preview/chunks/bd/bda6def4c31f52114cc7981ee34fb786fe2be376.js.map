{"version":3,"sources":["file:///Users/kengyulin/Documents/MyProject/CC/CC3.SpriteEffect.DemoProject/extensions/sprite-effect/source/assets/comp/SpriteEffectDissolve.ts"],"names":["_decorator","Color","Material","Texture2D","EDITOR_NOT_IN_PREVIEW","SpriteEffectBase","ccclass","property","SpriteEffectDissolve","type","tooltip","group","name","id","slide","range","isDirty","idx","_isPropDirty","setDirty","val","dissolveColor","_dissolveColor","set","reflashParams","factor","_factor","softness","_softness","width","_width","countOfUsedFloats","getPropsUnionKey","constructor","_is2Din3D","updateParams","index","propBuffer","_effectColor","r","g","b","a","initMaterial","mat","initialize","effectAsset","defines","technique","setProperty","noiseTexture"],"mappings":"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","sourcesContent":["import { _decorator, Color, Material, Texture2D } from 'cc';\nimport { DEV, EDITOR_NOT_IN_PREVIEW } from 'cc/env';\nimport { SpriteEffectBase } from './SpriteEffectBase';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('SpriteEffectDissolve')\nexport class SpriteEffectDissolve extends SpriteEffectBase {\n    private static _isPropDirty: boolean[] = [false, false, false];\n\n    protected isDirty(idx: number): boolean {\n        return SpriteEffectDissolve._isPropDirty[idx];\n    }\n    \n    protected setDirty(idx: number, val: boolean): void {\n        SpriteEffectDissolve._isPropDirty[idx] = val;\n    }\n\n\n    @property({ type: Texture2D, tooltip: \"指定噪聲貼圖\" })\n    public noiseTexture: Texture2D | null = null;\n\n    //#region dissolveColor\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, tooltip: \"溶解顏色\" })\n    public set dissolveColor(val: Color) {\n        this._dissolveColor.set(val);\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        }\n        else {\n            this.reflashParams();\n        }\n    }\n\n    public get dissolveColor(): Color {\n        return this._dissolveColor;\n    }\n\n    @property\n    private _dissolveColor: Color = new Color(0, 0, 0, 1);\n    //#endregion\n\n\n    //#region effectFactor\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0, 1, 0.01], tooltip: \"溶解程度\" })\n    public set factor(val: number) {\n        this._factor = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        }\n        else {\n            this.reflashParams();\n        }\n    }\n\n    public get factor(): number {\n        return this._factor;\n    }\n\n    @property\n    private _factor: number = 0.5;\n    //#endregion\n\n\n    //#region softness\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0, 1, 0.01], tooltip: \"柔邊程度\" })\n    public set softness(val: number) {\n        this._softness = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        }\n        else {\n            this.reflashParams();\n        }\n    }\n\n    public get softness(): number {\n        return this._softness;\n    }\n\n    @property\n    private _softness: number = 0.1;\n    //#endregion\n\n\n    //#region width\n    @property({ group: { name: \"Setter/Getter\", id: \"1\" }, slide: true, range: [0, 1, 0.01], tooltip: \"溶解寬度\" })\n    public set width(val: number) {\n        this._width = val;\n\n        if (EDITOR_NOT_IN_PREVIEW) {\n            this.reflashParams();\n        }\n        else {\n            this.reflashParams();\n        }\n    }\n\n    public get width(): number {\n        return this._width;\n    }\n\n    @property\n    private _width: number = 0.1;\n    //#endregion\n\n    //#region override\n    /**\n     * @override SpriteEffectBase\n     */\n    protected get countOfUsedFloats(): number {\n        return 16;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected getPropsUnionKey(): string {\n        return `${this.constructor.name}_${this._is2Din3D}`;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected updateParams(index: number, propBuffer: Float32Array): void {\n        propBuffer[index + 0] = this._effectColor.r / 255;\n        propBuffer[index + 1] = this._effectColor.g / 255;\n        propBuffer[index + 2] = this._effectColor.b / 255;\n        propBuffer[index + 3] = this._effectColor.a / 255;\n\n        propBuffer[index + 4] = this._dissolveColor.r / 255;\n        propBuffer[index + 5] = this._dissolveColor.g / 255;\n        propBuffer[index + 6] = this._dissolveColor.b / 255;\n        propBuffer[index + 7] = this._dissolveColor.a / 255;\n\n        propBuffer[index + 8] = this._factor;\n        propBuffer[index + 9] = this._softness;\n        propBuffer[index + 10] = this._width;\n    }\n\n    /**\n     * @override SpriteEffectBase\n     */\n    protected initMaterial(): Material {\n        let mat = new Material();\n        mat.initialize(\n            {\n                effectAsset: this.effectAsset,\n                defines: {},\n                technique: this._is2Din3D ? 1 : 0\n            }\n        );\n\n        mat.setProperty('noiseTexture', this.noiseTexture);\n        return mat;\n    }\n}\n\n"]}